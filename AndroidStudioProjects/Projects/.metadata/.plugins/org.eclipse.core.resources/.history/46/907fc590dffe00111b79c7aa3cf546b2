package ipcm.tool.kit;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.app.ListActivity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.ListView;
import android.widget.TextView;

public class News extends ListActivity{
	
	// The master lists of articles and tweets
	ArrayList<CropManagerArticle> articles = new ArrayList<CropManagerArticle>();
	ArrayList<Tweet> tweets =  new ArrayList<Tweet>();
	final DataHelper db = new DataHelper(this);
	final Context context = this;		
	boolean articlesSelected;
	
	// The action performed when an item in the list is clicked on
	protected void onListItemClick(ListView l, View v, int position, long id){
		
		if(articlesSelected){
			Log.d("link", articles.get(position).getLink());
			Uri uri = Uri.parse(articles.get(position).getLink());
			Intent intent = new Intent(Intent.ACTION_VIEW, uri);
			startActivity(intent);
		}else{
			Log.d("link", tweets.get(position).getLink());
			Uri uri = Uri.parse(tweets.get(position).getLink());
			Intent intent = new Intent(Intent.ACTION_VIEW, uri);
			startActivity(intent);
		}
		
	}

	// Run when the activity is initialized
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.news);
		
		// Initializing instance variables
		final Resources res = getResources();
		final TextView cropManager = (TextView) findViewById(R.id.crop_manager_button);
		final TextView twitter = (TextView) findViewById(R.id.twitter_button);
		final ListView list = getListView();
		articlesSelected = true;

		// Set the toggle buttons' background colors appropriately
		cropManager.setBackgroundColor(res.getColor(R.color.toggle_selected));
		twitter.setBackgroundColor(res.getColor(R.color.toggle_unselected));
		
		// Open the database
		db.openForWrite();
		
		// Get all of the timestamps
		Cursor c = db.getAllTimes();
		
		// If the timestamps are not present, put them into the database
		if(c.getCount() == 0)
		{
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
		}	
		
		c.close(); // End the cursor		
		
		list.setCacheColorHint(Color.TRANSPARENT); // Avoid a weird animation when a list item is clicked
		
		// If it has been more than an hour since the list has been refreshed, reload the list from the internet
		if(db.getTimeSince(DataHelper.ROW_CROPMANAGER) > 3600000)
		{
			Log.d("listLoad", "internet");
			new FetchCropManagerArticlesTask().execute("null");
		}
		// else, load the cached version of the list in memory
		else
		{
			Log.d("listLoad", "cache");
			articles = db.getCropManagerArticles();
			setListAdapter( new CropManagerAdapter(this, R.layout.articleitem, articles));
		}
		
		// The behavior of the crop manager button when clicked
		cropManager.setOnClickListener( new OnClickListener(){
			
			public void onClick(View v)
			{
				articlesSelected = true;
				
				db.openForWrite();
				cropManager.setBackgroundColor(res.getColor(R.color.toggle_selected));
				twitter.setBackgroundColor(res.getColor(R.color.toggle_unselected));
				setListAdapter(null);

				// If it has been more than an hour since the list has been refreshed, reload the list from the internet
				if(db.getTimeSince(DataHelper.ROW_CROPMANAGER) > 3600000)
				{
					new FetchCropManagerArticlesTask().execute("null");
				}
				// else, load the cached version of the list in memory
				else
				{
					articles = db.getCropManagerArticles();
					setListAdapter( new CropManagerAdapter(context, R.layout.articleitem, articles));
				}
				db.close();
			}
			
		});
		
		// The behavior of the twitter button when clicked
		twitter.setOnClickListener( new OnClickListener(){
			
			
			public void onClick(View v)
			{
				articlesSelected = false;
				
				db.openForWrite();
				cropManager.setBackgroundColor(res.getColor(R.color.toggle_unselected));
				twitter.setBackgroundColor(res.getColor(R.color.toggle_selected));
				setListAdapter(null);
				
				if(db.getTimeSince(DataHelper.ROW_TWITTER) > 3600000)
				{
					new FetchTweetsTask().execute("null");
				}
				else
				{
					tweets = db.getTweets();
					setListAdapter( new TwitterAdapter(context, R.layout.articleitem, tweets));
				}
				db.close();
			}
			
		});
		
		// Better make sure that the database and cursors are closed.
		c.close();
		db.close();		
		
	}
	
	private class FetchCropManagerArticlesTask extends AsyncTask<String, Void, ArrayList<CropManagerArticle>>{
		
		@Override
		protected void onPreExecute(){
			
		}
		
		@Override
		protected ArrayList<CropManagerArticle> doInBackground(String... urls){
			articles = updateCropManagerList();
			db.saveCropManagerArticles(articles);
			db.updateTime(DataHelper.ROW_CROPMANAGER);
			return articles;
		}
		
		@Override
		protected void onPostExecute(ArrayList<CropManagerArticle> articles){
			setListAdapter(new CropManagerAdapter(context, R.layout.articleitem, articles));
		}
		
	}
	
	private class FetchTweetsTask extends AsyncTask<String, Void, ArrayList<Tweet>>{
		
		@Override
		protected void onPreExecute(){
			
		}
		
		@Override
		protected ArrayList<Tweet> doInBackground(String... urls){
			tweets = updateTwitterList();
			db.saveTweets(tweets);
			db.updateTime(DataHelper.ROW_TWITTER);
			return tweets;
		}
		
		@Override
		protected void onPostExecute(ArrayList<Tweet> articles){
			setListAdapter(new TwitterAdapter(context, R.layout.articleitem, tweets));
		}
		
	}
	
	// Return the minimum value in a set of three numbers
	private int min(int a, int b, int c)
	{
	  if (b < a) {
          a = b;
      }
      if (c < a) {
          a = c;
      }
      return a;
	}
	
	// Return the minimum value in a set of two numbers
	private int min(int a, int b)
	{
	  if(a < b)
		  return a;
	  else
		  return b;
	}
	
	// Get an input stream from a given URL
	public InputStream getInputStream(URL url)
	{
		try{
			return url.openConnection().getInputStream();
		}catch(IOException e){
			return null;
		}
	}
	
	// Returns an updated list of CropManagerArticles read from the internet
	private ArrayList<CropManagerArticle> updateCropManagerList()
	{		
		ArrayList<String> titles = new ArrayList<String>();
		ArrayList<String> dates = new ArrayList<String>();
		ArrayList<String> links = new ArrayList<String>();
		
		try{
			
			URL url = new URL("http://ipcm.wisc.edu/feed/");
			
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
			factory.setNamespaceAware(false);
			XmlPullParser xpp = factory.newPullParser();
			
			xpp.setInput(getInputStream(url), "UTF_8");
			
			boolean insideItem = false;
			int eventType = xpp.getEventType();
			
			while(eventType != XmlPullParser.END_DOCUMENT){
				if(eventType == XmlPullParser.START_TAG){
					if(xpp.getName().equalsIgnoreCase("item")){
						insideItem = true;
					} else if(xpp.getName().equalsIgnoreCase("title")){
						if(insideItem)
							titles.add(xpp.nextText());
					} else if(xpp.getName().equalsIgnoreCase("pubdate")){
						if(insideItem)
							dates.add(xpp.nextText());
					} else if(xpp.getName().equalsIgnoreCase("link")){
						if(insideItem)
							links.add(xpp.nextText());
					}
					
				} else if(eventType == XmlPullParser.END_TAG &&
									xpp.getName().equalsIgnoreCase("item")){
					insideItem = false;
				}
				
				eventType = xpp.next();
			}
			
			int min = min(titles.size(), dates.size(), links.size());
			for(int i = 0; i < min; i++)
			{
				String date = dates.get(i);
				
				articles.add(new CropManagerArticle(titles.get(i), parseDate(dates.get(i)), links.get(i)));
			}			
			
		}catch(MalformedURLException e){
			e.printStackTrace();
		}catch(XmlPullParserException e){
			e.printStackTrace();
		}catch(IOException e){
			e.printStackTrace();
		}
		
		return articles;
		/*articles = new ArrayList<CropManagerArticle>();
		
		try{
			URL feedUrl = new URL("http://ipcm.wisc.edu/feed/");
			
			SyndFeedInput input = new SyndFeedInput();
			SyndFeed feed = input.build( new XmlReader(feedUrl));
			
			List<SyndEntry> entries = feed.getEntries();
			
			Iterator<SyndEntry> iter = entries.iterator();
			
			while(iter.hasNext())
			{
				SyndEntry curr = iter.next();
				
				Date date = curr.getPublishedDate();
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(date);
				
				String d = "";
				
				switch(cal.get(Calendar.DAY_OF_WEEK))
				{
				case 7: d += "Saturday, ";
						break;
				case 1: d += "Sunday, ";
						break;
				case 2: d += "Monday, ";
						break;
				case 3: d += "Tuesday, ";
						break;
				case 4: d += "Wednesday, ";
						break;
				case 5: d += "Thursday, ";
						break;
				case 6: d += "Friday, ";
						break;
				}
				
				switch(cal.get(Calendar.MONTH))
				{
				case 0: d += "Jan ";
						break;
				case 1: d += "Feb ";
						break;
				case 2: d += "Mar ";
						break;
				case 3: d += "Apr ";
						break;
				case 4: d += "May ";
						break;
				case 5: d += "Jun ";
						break;
				case 6: d += "Jul ";
				break;
				case 7: d += "Aug ";
						break;
				case 8: d += "Sep ";
						break;
				case 9: d += "Oct ";
						break;
				case 10: d += "Nov ";
						break;
				case 11: d += "Dec ";
						break;
				}
				
				d += cal.get(Calendar.DAY_OF_MONTH) + " " + cal.get(Calendar.YEAR) + ", ";
				
				if(cal.get(Calendar.HOUR) == 0)
					d += "12:";
				else
					d+= cal.get(Calendar.HOUR) + ":";
				
				if(cal.get(Calendar.MINUTE) < 10)
					d += "0" + cal.get(Calendar.MINUTE);
				else
					d+= cal.get(Calendar.MINUTE);
				
				d += " ";
				
				switch(cal.get(Calendar.AM_PM))
				{
				case 0: d += "AM";
						break;
				case 1: d += "PM";
						break;
				}
				
				articles.add(new CropManagerArticle(curr.getTitle(), d, curr.getLink()));
			}
			
//			Log.d("feed", feed.toString());
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return articles;*/
	}
	
	// Returns an updated list of Tweets read from the internet
	private ArrayList<Tweet> updateTwitterList()
	{
		ArrayList<Tweet> tweetsTemp = new ArrayList<Tweet>();
		ArrayList<String> titles = new ArrayList<String>();
		ArrayList<String> links = new ArrayList<String>();
		
		try{
			
			URL url = new URL("http://api.twitter.com/1/WisCropMan/lists/WisAg/statuses.atom");
			
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
			factory.setNamespaceAware(false);
			XmlPullParser xpp = factory.newPullParser();
			
			xpp.setInput(getInputStream(url), "UTF_8");
			
			boolean insideItem = false;
			int eventType = xpp.getEventType();
			
			while(eventType != XmlPullParser.END_DOCUMENT){
				if(eventType == XmlPullParser.START_TAG){
					if(xpp.getName().equalsIgnoreCase("entry")){
						insideItem = true;
					} else if(xpp.getName().equalsIgnoreCase("content")){
						if(insideItem)
							titles.add(xpp.nextText());
					} else if(xpp.getName().equalsIgnoreCase("link")){
						if(insideItem)
							if(xpp.getAttributeValue(0).equals("text/html"))
								links.add(xpp.getAttributeValue(2));
					}
					
				} else if(eventType == XmlPullParser.END_TAG &&
									xpp.getName().equalsIgnoreCase("entry")){
					insideItem = false;
				}
				
				eventType = xpp.next();
			}
			
			for(int i = 0; i < min(titles.size(), links.size()); i++)
			{
				tweetsTemp.add(new Tweet(titles.get(i), links.get(i)));
			}			
			
			
		}catch(MalformedURLException e){
			e.printStackTrace();
		}catch(XmlPullParserException e){
			e.printStackTrace();
		}catch(IOException e){
			e.printStackTrace();
		}
		
		return tweetsTemp;
		
		
		
		/*ArrayList<Tweet> tweets = new ArrayList<Tweet>();
		
		try{
			URL feedUrl = new URL("http://twitter.com/statuses/user_timeline/WisCropMan.rss");
			
			SyndFeedInput input = new SyndFeedInput();
			SyndFeed feed = input.build( new XmlReader(feedUrl));
			
			List<SyndEntry> entries = feed.getEntries();
			
			Iterator<SyndEntry> iter = entries.iterator();
			
			while(iter.hasNext())
			{
				SyndEntry curr = iter.next();
				
				tweets.add(new Tweet(curr.getTitle()));
			}
			
//			Log.d("feed", feed.toString());
		}catch(Exception e){
			e.printStackTrace();
			Log.d("error", e.getMessage());
		}
		
		return tweets;*/
	}
	
	private String parseDate(String date)
	{
		return date.substring(0, date.indexOf("+") - 1);
	}
	
}
