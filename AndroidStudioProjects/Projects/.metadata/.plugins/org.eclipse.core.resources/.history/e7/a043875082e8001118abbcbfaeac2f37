package ipcm.tool.kit;

import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import android.app.ListActivity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;

import com.google.code.rome.android.repackaged.com.sun.syndication.feed.synd.SyndEntry;
import com.google.code.rome.android.repackaged.com.sun.syndication.feed.synd.SyndFeed;
import com.google.code.rome.android.repackaged.com.sun.syndication.io.SyndFeedInput;
import com.google.code.rome.android.repackaged.com.sun.syndication.io.XmlReader;

public class News extends ListActivity{
	
	ArrayList<CropManagerArticle> articles = new ArrayList<CropManagerArticle>();
	
	public void onResume(){
		DataHelper db = new DataHelper(this);
		db.openForWrite();
		
		final ListView list = getListView();

		if(db.getTimeSince(db.ROW_CROPMANAGER) > 3600000)
		{
			ArrayList<CropManagerArticle> articles = updateCropManagerList();
			list.setAdapter( new CropManagerAdapter(this, R.layout.articleitem, articles));
			db.saveCropManagerArticles(articles);
			db.updateTime(db.ROW_CROPMANAGER);
			Log.d("updated", "updated");
		}
		else
		{
			ArrayList<CropManagerArticle> articles = db.getCropManagerArticles();
			list.setAdapter( new CropManagerAdapter(this, R.layout.articleitem, articles));
			Log.d("updated", "notUpdated");
		}
		
		db.close();

		super.onResume();
	}

	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.news);
		
		final DataHelper db = new DataHelper(this);
		db.openForWrite();
		Cursor c = db.getAllTimes();
		
		if(c.getCount() == 0)
		{
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
			db.insertTime();
		}		
		c.close();		
		
		c = db.getAllTimes();
		
		// Temporary code
		
		c.moveToFirst();
		
		while(!c.isAfterLast())
		{
			String rowId = c.getString(db.ID_COLUMN);
			String rowName = c.getString(db.TIME_COLUMN);
			
			Log.d("row", "Row " + rowId + ": " + rowName);
			c.moveToNext();
		}
		//End temporary code
		
		final Resources res = getResources();
		final Context context = this;
		
		final TextView cropManager = (TextView) findViewById(R.id.crop_manager_button);
		final TextView twitter = (TextView) findViewById(R.id.twitter_button);
		final ListView list = getListView();
		
		list.setCacheColorHint(Color.TRANSPARENT);
		
		if(db.getTimeSince(db.ROW_CROPMANAGER) > 3600000)
		{
			ArrayList<CropManagerArticle> articles = updateCropManagerList();
			list.setAdapter( new CropManagerAdapter(this, R.layout.articleitem, articles));
			db.saveCropManagerArticles(articles);
			db.updateTime(db.ROW_CROPMANAGER);
		}
		else
		{
			ArrayList<CropManagerArticle> articles = db.getCropManagerArticles();
			list.setAdapter( new CropManagerAdapter(this, R.layout.articleitem, articles));
		}
		
		cropManager.setBackgroundColor(res.getColor(R.color.toggle_selected));
		twitter.setBackgroundColor(res.getColor(R.color.toggle_unselected));
		
		cropManager.setOnClickListener( new OnClickListener(){
			
			public void onClick(View v)
			{
				db.openForWrite();
				cropManager.setBackgroundColor(res.getColor(R.color.toggle_selected));
				twitter.setBackgroundColor(res.getColor(R.color.toggle_unselected));

				if(db.getTimeSince(db.ROW_CROPMANAGER) > 3600000)
				{
					ArrayList<CropManagerArticle> articles = updateCropManagerList();
					list.setAdapter( new CropManagerAdapter(context, R.layout.articleitem, articles));
					db.saveCropManagerArticles(articles);
					db.updateTime(db.ROW_CROPMANAGER);
				}
				else
				{
					ArrayList<CropManagerArticle> articles = db.getCropManagerArticles();
					list.setAdapter( new CropManagerAdapter(context, R.layout.articleitem, articles));
				}
				db.close();
			}
			
		});
		
		twitter.setOnClickListener( new OnClickListener(){
			
			public void onClick(View v)
			{
				db.openForWrite();
				cropManager.setBackgroundColor(res.getColor(R.color.toggle_unselected));
				twitter.setBackgroundColor(res.getColor(R.color.toggle_selected));

				Log.d("tweetTime", ((Long)db.getTimeSince(db.ROW_TWITTER)).toString());
				
				if(db.getTimeSince(db.ROW_TWITTER) > 3600000)
				{
					ArrayList<Tweet> tweets = updateTwitterList();
					list.setAdapter( new TwitterAdapter(context, R.layout.articleitem, tweets));
					db.saveTweets(tweets);
					db.updateTime(db.ROW_TWITTER);
					Log.d("tweets", "updated");
				}
				else
				{
					ArrayList<Tweet> tweets = db.getTweets();
					list.setAdapter( new TwitterAdapter(context, R.layout.articleitem, tweets));
				}
				db.close();
			}
			
		});
		
		list.setOnItemClickListener( new ListView.OnItemClickListener(){
			
			public void onItemClick(AdapterView<?> parent, View v, int pos, long l)
			{
				String url = articles.get(pos).getLink();
				Log.d("navigatingTo...", url);
				
				
				Intent intent = new Intent(context, ArticleWebView.class);
				intent.putExtra("url", url);
				startActivity(intent);
			}
			
		});
		
		c.close();
		db.close();
		
		
	}
	
	private ArrayList<String> parseXML(String _feed, String tag)
	{
		String feed = _feed;
		int index = 0;
		ArrayList<String> tags = new ArrayList<String>();
		
		while(feed.contains("<" + tag + ">"))
		{
			Log.d("it's working", "it's working");
			index = feed.indexOf("<" + tag + ">");
			index += tag.length()+2;
			feed = feed.substring(index);
			
			tags.add(feed.substring(0, feed.indexOf("</")));
			index = feed.indexOf("</");
			index += tag.length() + 3;
			
			feed = feed.substring(index);
		}
		
		return tags;
	}
	
	private ArrayList<CropManagerArticle> updateCropManagerList()
	{
		articles = new ArrayList<CropManagerArticle>();
		
		File rssFeed = new File("http://ipcm.wisc.edu/feed");
		/*articles = new ArrayList<CropManagerArticle>();
		
		try{
			URL feedUrl = new URL("http://ipcm.wisc.edu/feed/");
			
			SyndFeedInput input = new SyndFeedInput();
			SyndFeed feed = input.build( new XmlReader(feedUrl));
			
			List<SyndEntry> entries = feed.getEntries();
			
			Iterator<SyndEntry> iter = entries.iterator();
			
			while(iter.hasNext())
			{
				SyndEntry curr = iter.next();
				
				Date date = curr.getPublishedDate();
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(date);
				
				String d = "";
				
				switch(cal.get(Calendar.DAY_OF_WEEK))
				{
				case 7: d += "Saturday, ";
						break;
				case 1: d += "Sunday, ";
						break;
				case 2: d += "Monday, ";
						break;
				case 3: d += "Tuesday, ";
						break;
				case 4: d += "Wednesday, ";
						break;
				case 5: d += "Thursday, ";
						break;
				case 6: d += "Friday, ";
						break;
				}
				
				switch(cal.get(Calendar.MONTH))
				{
				case 0: d += "Jan ";
						break;
				case 1: d += "Feb ";
						break;
				case 2: d += "Mar ";
						break;
				case 3: d += "Apr ";
						break;
				case 4: d += "May ";
						break;
				case 5: d += "Jun ";
						break;
				case 6: d += "Jul ";
				break;
				case 7: d += "Aug ";
						break;
				case 8: d += "Sep ";
						break;
				case 9: d += "Oct ";
						break;
				case 10: d += "Nov ";
						break;
				case 11: d += "Dec ";
						break;
				}
				
				d += cal.get(Calendar.DAY_OF_MONTH) + " " + cal.get(Calendar.YEAR) + ", ";
				
				if(cal.get(Calendar.HOUR) == 0)
					d += "12:";
				else
					d+= cal.get(Calendar.HOUR) + ":";
				
				if(cal.get(Calendar.MINUTE) < 10)
					d += "0" + cal.get(Calendar.MINUTE);
				else
					d+= cal.get(Calendar.MINUTE);
				
				d += " ";
				
				switch(cal.get(Calendar.AM_PM))
				{
				case 0: d += "AM";
						break;
				case 1: d += "PM";
						break;
				}
				
				articles.add(new CropManagerArticle(curr.getTitle(), d, curr.getLink()));
			}
			
//			Log.d("feed", feed.toString());
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return articles;*/
	}
	
	private ArrayList<Tweet> updateTwitterList()
	{

		ArrayList<Tweet> tweets = new ArrayList<Tweet>();
		
		try{
			URL feedUrl = new URL("http://twitter.com/statuses/user_timeline/WisCropMan.rss");
			
			SyndFeedInput input = new SyndFeedInput();
			SyndFeed feed = input.build( new XmlReader(feedUrl));
			
			List<SyndEntry> entries = feed.getEntries();
			
			Iterator<SyndEntry> iter = entries.iterator();
			
			while(iter.hasNext())
			{
				SyndEntry curr = iter.next();
				
				tweets.add(new Tweet(curr.getTitle()));
			}
			
//			Log.d("feed", feed.toString());
		}catch(Exception e){
			e.printStackTrace();
			Log.d("error", e.getMessage());
		}
		
		return tweets;
	}
	
}
