package ipcm.tool.kit;

import ipcm.tool.kit.ImageDetailActivity.ImagePagerAdapter;

import java.io.IOException;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

public class ImageDetailFragment extends Fragment {
    private static final String IMAGE_DATA_EXTRA = "resId";
    private static int mImageNum;
    private static ImageView mImageView;
    private static Bitmap bmp = null;
    private static ImagePagerAdapter adapter;
    

    static ImageDetailFragment newInstance(int imageNum, ImagePagerAdapter _adapter) {
        final ImageDetailFragment f = new ImageDetailFragment();
        final Bundle args = new Bundle();
        args.putInt(IMAGE_DATA_EXTRA, imageNum);
        f.setArguments(args);
        adapter = _adapter;
        return f;
    }

    // Empty constructor, required as per Fragment docs
    public ImageDetailFragment() {}

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
       mImageNum = getArguments() != null ? getArguments().getInt(IMAGE_DATA_EXTRA) : -1;
       // Log.d("imageNum", ((Integer)mImageNum).toString());

       // if(ImageDetailActivity.cache.get(mImageNum) != null)
       // 	mImageView.setImageBitmap(ImageDetailActivity.cache.get(mImageNum));
       // else
        //new LoadBitmapTask().execute(mImageNum);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        // image_detail_fragment.xml contains just an ImageView
        final View v = inflater.inflate(R.layout.image_detail_fragment, container, false);
        mImageView = (ImageView) v.findViewById(R.id.imageView);
        if(ImageDetailActivity.cache.get(mImageNum) != null)
        	mImageView.setImageBitmap(ImageDetailActivity.cache.get(mImageNum));
        else{
        		//Drawable blank = getResources().getDrawable(R.drawable.blank);
        		//Bitmap blankBmp = ((BitmapDrawable)blank).getBitmap();
        		//mImageView.setImageBitmap(blankBmp);
        		//new LoadBitmapTask().execute(mImageNum);
        	try{
            	mImageView.setImageBitmap(new LoadBitmapTask().execute(mImageNum).get());
        	}catch(Exception e){
        		e.printStackTrace();
        	}
        //	Log.d("async", "tasking");
        }
        return mImageView;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        
        //final Bitmap bmp = loadBitmap(mImageNum);
        //mImageView.setImageBitmap(bmp); // Load image into ImageView
    }
    
    public static class LoadBitmapTask extends AsyncTask<Integer, Void, Bitmap> {
    	
    	int pos = -1;
    	
    	protected void onPreExecute(){
    		
    	}
    	
		protected Bitmap doInBackground(Integer... params){			

			pos = params[0];
			
			try{
				return BitmapFactory.decodeStream(ImageDetailActivity.bitmaps.get(pos).getImageURL().openConnection().getInputStream());	
			}catch(IOException e){
				e.printStackTrace();
			}			
			
			Log.d("returning", "null");
			
			return null;
		}
		
		protected void onPostExecute(Bitmap _bmp){
			bmp = _bmp;
			if(_bmp != null){
				ImageDetailActivity.currBitmap = _bmp;
				ImageDetailActivity.cache.put(mImageNum, _bmp);
				Log.d("inserted", ((Integer)pos).toString());
				mImageView.setImageBitmap(_bmp);
				Log.d("got", "HERE");
			}else
				Log.d("bitmap", "NUULLL");
		}
		
    }
    
}