package ipcm.tool.kit;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.app.ListActivity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ListView;

public class Publications extends ListActivity{
	
	private ArrayList<Publication> publications;
	DataHelper db;
	ListView list;
	Context context = this;
	SAXParser parser;
	DefaultHandler handler;
	InputStream in;
	private ArrayList<Publication> tempPubs = new ArrayList<Publication>();
	
	// The action performed when an item in the list is clicked on
	protected void onListItemClick(ListView l, View v, int position, long id){
		Log.d("link", publications.get(position).getLink());
		// Parse the descrip tag so that it immediately downloads the pdf
		Uri uri = Uri.parse(publications.get(position).getLink());
		Intent intent = new Intent(Intent.ACTION_VIEW, uri);
		startActivity(intent);
	}

	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.publications);
		
		publications = new ArrayList<Publication>();
		db = new DataHelper(this);
		list = getListView();
		URL url = null;
		
		try{
			url = new URL("http://ipcm.wisc.edu/blog/category/toolkit/feed/");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		try{
			parser = SAXParserFactory.newInstance().newSAXParser();
			
			handler = new DefaultHandler(){
				
				boolean btitle = false;
				boolean blink = false;
				
				String title = null;
				String link = null;
				
				public void startElement(String url, String localName, String qName, Attributes attributes) throws SAXException{
					
					if(qName.equalsIgnoreCase("title"))
						btitle = true;
					
					if(qName.equalsIgnoreCase("description"))
						blink = true;
					
				}
				
				public void endElement(String uri, String localName, String qName) throws SAXException{
					
				}
				
				public void characters(char ch[], int start, int length) throws SAXException{
					
					if(btitle){
						title = new String(ch, start, length);
						btitle = false;
					}
					
					if(blink){
						link = new String(ch, start, length);
						blink = false;
					}
					
					if(title != null && link != null){
						Publication newPub = new Publication(title, link);
						tempPubs.add(newPub);
						
						title = null; link = null;
					}					
					
				}
				
			};
			
			HttpClient client = new DefaultHttpClient();
			HttpGet request = new HttpGet(url.toString());
			HttpResponse response = client.execute(request);	
			in = response.getEntity().getContent();
			//saxParser.parse(in, handler);
			
			new ParseTask().execute(parser);
			

			Log.d("adapter", "SET");
			
			//this.setListAdapter(new PictureAdapter(this, R.layout.pictureitem, pictures));
			
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
private class ParseTask extends AsyncTask<SAXParser, Void, Void>{
		
		protected void onPreExecute(){
			
		}
		
		protected Void doInBackground(SAXParser... params){
			try{
				parser.parse(in, handler);
			}catch(Exception e){
				e.printStackTrace();
			}
			
			return null;
			
		}
		
		protected void onPostExecute(Void v){
			
			for(Publication pub: tempPubs){
				publications.add(pub);
			}
			
			Log.d("pictures size", ((Integer) publications.size()).toString());
			setListAdapter(new PubAdapter(context, R.layout.pubitem, publications));
		}
	}
	
	private class FetchPublicationsTask extends AsyncTask<String, Void, ArrayList<Publication>>{
		
		@Override
		protected void onPreExecute(){
			
		}
		
		@Override
		protected ArrayList<Publication> doInBackground(String... urls){
			publications = updatePublicationList();
			return publications;
		}
		
		@Override
		protected void onPostExecute(ArrayList<Publication> publications){
			setListAdapter(new PubAdapter(context, R.layout.pubitem, publications));
		}
		
	}
	
	// Get an input stream from a given URL
	public InputStream getInputStream(URL url)
	{
		try{
			return url.openConnection().getInputStream();
		}catch(IOException e){
			return null;
		}
	}
	
	// Return the minimum value in a set of two numbers
	private int min(int a, int b)
	{
	  if(a < b)
		  return a;
	  else
		  return b;
	}
	
	// Returns an updated list of CropManagerArticles read from the internet
	private ArrayList<Publication> updatePublicationList()
	{		
		ArrayList<Publication> pubs = new ArrayList<Publication>();
		ArrayList<String> titles = new ArrayList<String>();
		ArrayList<String> links = new ArrayList<String>();
		
		if(db.getTimeSince(DataHelper.ROW_PUBLICATIONS) > 3600000){
			
			try{
				
				URL url = new URL("http://ipcm.wisc.edu/blog/category/toolkit/feed/");
				
				XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
				factory.setNamespaceAware(false);
				XmlPullParser xpp = factory.newPullParser();
				
				xpp.setInput(getInputStream(url), "UTF_8");
				
				boolean insideItem = false;
				int eventType = xpp.getEventType();
				
				while(eventType != XmlPullParser.END_DOCUMENT){
					if(eventType == XmlPullParser.START_TAG){
						if(xpp.getName().equalsIgnoreCase("item")){
							insideItem = true;
						} else if(xpp.getName().equalsIgnoreCase("title")){
							if(insideItem)
								titles.add(xpp.nextText());
						} else if(xpp.getName().equalsIgnoreCase("description")){
							if(insideItem){
								String link = xpp.nextText();
								links.add(link);
							}
						}
						
					} else if(eventType == XmlPullParser.END_TAG &&
										xpp.getName().equalsIgnoreCase("item")){
						insideItem = false;
					}
					
					eventType = xpp.next();
				}
				
				int min = min(titles.size(), links.size());
				for(int i = 0; i < min; i++)
				{
					pubs.add(new Publication(titles.get(i), links.get(i)));
				}			
				
			}catch(MalformedURLException e){
				e.printStackTrace();
			}catch(XmlPullParserException e){
				e.printStackTrace();
			}catch(IOException e){
				e.printStackTrace();
			}
			
			db.savePublications(pubs);
			db.updateTime(DataHelper.ROW_PUBLICATIONS);
			
		}else{
			pubs = db.getAllPublications();
		}		
		
		return pubs;
		
	}
	
}